#!/usr/bin/env python3
import sys
from sys import argv
import os.path
from os import path
import math

def selection_sort(n, mylist):
    comp = 0
    for i in range(n):
        min = i
        for j in range(i + 1, n):
            comp += 1
            if (mylist[j] < mylist[min]):
                min = j
        if (min != i):
            mylist[i], mylist[min] = mylist[min], mylist[i]
    return comp

def insertion_sort(n, mylist):
    comp = 0
    for i in range(1, n):
        j = i
        while j > 0:
            comp += 1
            if mylist[j - 1] <= mylist[j]:
                mylist[j], mylist[j - 1] = mylist[j - 1], mylist[j]
                j -= 1
            else:
                break
    return comp

def bubble_sort(n, mylist):
    comp = 0
    for i in range(n):
        for j in range(n - 1, i, -1):
            comp += 1
            if (mylist[j] < mylist[j - 1]):
                mylist[j], mylist[j - 1] = mylist[j - 1], mylist[j]
    return comp

def quick_sort(mylist):
    n = len(mylist)
    if (n <= 1):
        return 0
    pivot = mylist[0]
    left = []
    right = []
    for i in range(1, n):
        if (mylist[i] < pivot):
            left.append(mylist[i])
        else:
            right.append(mylist[i])
    return quick_sort(left) + quick_sort(right) + n - 1

def merge(left, right, mylist):
    i = j = k = 0
    comp = 0
    while (i < len(left) and j < len(right)):
        comp += 1
        if (left[i] < right[j]):
            mylist[k] = left[i]
            i += 1
        else:
            mylist[k] = right[j]
            j += 1
        k += 1
    while (i < len(left)):
        mylist[k] = left[i]
        i += 1
        k += 1
    while (j < len(right)):
        mylist[k] = right[j]
        j += 1
        k += 1
    return comp

def merge_sort(mylist):
    n = len(mylist)
    if (n <= 1):
        return 0
    mid = n // 2
    left = mylist[:mid]
    right = mylist[mid:]
    return merge_sort(left) + merge_sort(right) + merge(left, right, mylist)

def myprint(n, mylist):
    print(n, "elements")
    print("Selection sort:", selection_sort(n, mylist[::]), "comparisons")
    print("Insertion sort:", insertion_sort(n, mylist[::]), "comparisons")
    print("Bubble sort:", bubble_sort(n, mylist[::]), "comparisons")
    print("Quicksort:", quick_sort(mylist[::]), "comparisons")
    print("Merge sort:", merge_sort(mylist[::]), "comparisons")

def printhelp() : 
    print("USAGE")
    print("    ./301dannon file")
    print("DESCRIPTION")
    print("    file   file that contains the numbers to be sorted, separated by spaces")

def list_to_int(mylist):
    for i in range(len(mylist)):
        try :
            mylist[i] = float(mylist[i])
        except ValueError:
            exit(84)

def check_empty_file(file):
    if (os.stat(file).st_size == 0):
        exit(84)

if(len(sys.argv) == 1):
    exit(84)
if(sys.argv[1] == "-h") :
    printhelp()
    exit(0)
if(len(sys.argv) != 2):
    exit(84)

test = path.exists(argv[1])
if(test == False):
    exit(84)
check_empty_file(argv[1])
f = open(argv[1], "r")
mylist = f.read().split()
list_to_int(mylist)
n = len(mylist)
myprint(n, mylist)
exit (0)